MySQL的分页似乎一直是个问题，有什么优化方法吗？网上看到网上推荐了一些分页方法，但似乎不太可行，你能点评一下吗？

方法1: 直接使用数据库提供的SQL语句

---语句样式: MySQL中,可用如下方法: SELECT * FROM 表名称 LIMIT M,N。

---适应场景: 适用于数据量较少的情况(元组百/千级)。

---原因/缺点: 全表扫描,速度会很慢 且 有的数据库结果集返回不稳定(如某次返回1,2,3,另外的一次返回2,1,3)。Limit限制的是从结果集的M位置处取出N条输出,其余抛弃。

方法2: 建立主键或唯一索引, 利用索引(假设每页10条)

---语句样式: MySQL中,可用如下方法:
复制代码 代码如下:

SELECT * FROM 表名称 WHERE id_pk > (pageNum*10) LIMIT M。

---适应场景: 适用于数据量多的情况(元组数上万)。
---原因: 索引扫描,速度会很快。有朋友提出因为数据查询出来并不是按照pk_id排序的，所以会有漏掉数据的情况，只能方法3。

方法3: 基于索引再排序

---语句样式: MySQL中,可用如下方法: SELECT * FROM 表名称 WHERE id_pk > (pageNum*10) ORDER BY id_pk ASC LIMIT M。

---适应场景: 适用于数据量多的情况(元组数上万). 最好ORDER  BY后的列对象是主键或唯一所以,使得ORDERBY操作能利用索引被消除但结果集是稳定的(稳定的含义,参见方法1)。

---原因: 索引扫描,速度会很快. 但MySQL的排序操作,只有ASC没有DESC(DESC是假的,未来会做真正的DESC,期待)。

方法4: 基于索引使用prepare（第一个问号表示pageNum，第二个？表示每页元组数）

---语句样式: MySQL中,可用如下方法:
复制代码 代码如下:

PREPARE stmt_name FROM SELECT * FROM 表名称 WHERE id_pk > (？* ？) ORDER BY id_pk
ASC LIMIT M。

---适应场景: 大数据量。
---原因: 索引扫描,速度会很快. prepare语句又比一般的查询语句快一点。

方法5:利用MySQL支持ORDER操作可以利用索引快速定位部分元组,避免全表扫描

---比如: 读第1000到1019行元组(pk是主键/唯一键)。
复制代码 代码如下:

---SELECT * FROM your_table WHERE pk>=1000 ORDER BY pk ASC LIMIT 0,20。

方法6: 利用"子查询/连接+索引"快速定位元组的位置,然后再读取元组. 道理同方法5
---如(id是主键/唯一键,蓝色字体时变量):

利用子查询示例:
复制代码 代码如下:

SELECT* FROM your_table WHERE id <=
(SELECT id FROM your_table ORDER
BYid descLIMIT ($page-1)*$pagesize ORDER BY id desc
LIMIT $pagesize

利用连接示例:
复制代码 代码如下:

SELECT* FROM your_table ASt1
JOIN(SELECT id FROM your_table ORDER BY
id descLIMIT ($page-1)*$pagesize ASt2
WHERE
t1.id <= t2.id ORDER BY t1.id descLIMIT $pagesize;

方法7: 存储过程类（最好融合上述方法5/6）
---语句样式: 不再给出

---适应场景: 大数据量.  作者推荐的方法

---原因: 把操作封装在服务器，相对更快一些。

方法8: 反面方法

---网上有人写使用 SQL_CALC_FOUND_ROWS。 没有道理，勿模仿 。

基本上,可以推广到所有数据库,道理是一样的。但方法5未必能推广到其他数据库,推广的前提是,其他数据库支持ORDER BY操作可以利用索引直接完成排序。